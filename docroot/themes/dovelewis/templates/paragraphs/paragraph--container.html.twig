{#
/**
 * @file
 * Template for Container Paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    bg_color ? 'bg-color--' ~ bg_color|clean_class,
    bg_image_style ? 'bg-image-style--' ~ bg_image_style|clean_class,
    border_color ? 'border-color--' ~ border_color|clean_class,
    bg_width ? 'width--' ~ bg_width|clean_class,
    top_padding ? 'top-padding--' ~ top_padding|clean_class,
    bottom_padding ? 'bottom-padding--' ~ bottom_padding|clean_class,
    display_on ? 'display-on--' ~ display_on|clean_class,
    center_title ? 'title-align--center',
    'subtract-bottom--true',
  ]
%}
{%
  set content_width_classes = [
    content_width ? 'width--' ~ content_width|clean_class,
  ]
%}

{# Set Foundation grid width classes. #}
{# Background width. #}
{% if bg_width == 'site' %}
  {% set classes = classes|merge(['grid-container']) %}
{% endif %}
{# Content width. #}
{# Make sure we only set .grid-container on the outermost (background) div if background is set to site width. #}
{% if content_width == 'full' and bg_width != 'site' %}
  {% set content_width_classes = content_width_classes|merge(['grid-container', 'full']) %}
{% elseif content_width == 'site' and bg_width != 'site' %}
  {% set content_width_classes = content_width_classes|merge(['grid-container']) %}
{% elseif content_width == 'narrow' or content_width == 'very-narrow' %}
  {% set content_width_classes = content_width_classes|merge(['grid-container']) %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="container__inner">
      {%  if display_container_title and container_title %}
        <h2 class="container__title h2--title {{ content_width_classes|join(' ') }}">{{ container_title }}</h2>
      {% endif %}

      <div class="container__content {{ content_width_classes|join(' ') }}">
        <div class="grid-x grid-margin-x">
          {% block content %}
            {{ content }}
          {% endblock %}
        </div>
      </div>
    </div>
  </div>
{% endblock paragraph %}
