{#
/**
 * @file
 * Event node - View Mode: Full.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @TODO: field_primary_sponsor and field_secondary_sponsors have been deprecated
 * in favor of field_event_prim_sponsors_ref and field_event_sup_sponsors_ref. We
 * should eventually remove the if else statements and stop rendering the deprecated fields.
#}
{%
  set classes = [
    'node',
    'node--type--' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode--' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>
  <div{{ content_attributes.addClass('node__content') }}>
    {{ title_prefix }}
    {{ title_suffix }}

    <div class="node--event__detail-header-image">
      <div class="node--event__detail-header-image__inner grid-container">
        {{ content.field_hero_image }}
      </div>
    </div>

    <div class="node--event__detail-top">
      <div class="node--event__detail-top__inner grid-container">
        <div class="field--name-field-event-title">
          <h1 class="event__title">
            {{ label.0 }}
          </h1>
        </div>

        <div class="field--name-field-event__details-container">

          <div class="field--name-field-event__details-top-content">
            <div class="event__details grid-x">
              <div class="event__details__left cell large-6">
                {{ content.field_event_location_name }}

                {{ content.field_event_location_address }}

                {{ content.field_optional_link }}
              </div>
              <div class="event__details__right cell large-6">
                {{ content.field_event_date_long }}

                {% if content.field_event_annual.0['#markup'] == 'On' %}
                  <span class="annual-event">{{ 'Annual'|t }}</span>
                {% endif %}

                {% if content.field_hide_start_end_time.0['#markup'] != 'Hide' %}
                  {{ content.field_event_date_time }}
                {% endif %}
                {{ content.field_event_price }}
              </div>
            </div>

            {% if content.field_event_button_link.0['#url'] is defined %}
            <div class="event__rsvp-btn">
              <a class="button" href="{{ content.field_event_button_link.0['#url'] }}" target="_blank">
                {{ content.field_event_button_link.0['#title'] }}
              </a>
            </div>
            {% endif %}
          </div>

          {% if content.field_event_prim_sponsors_ref['#items'].getValue() %}
            <div class="field--name-field-event-primary-sponsor-wrapper">
              {{ content.field_event_prim_sponsors_ref }}
            </div>
          {% elseif content.field_primary_sponsor|render %}
            <div class="field--name-field-event-primary-sponsor-wrapper--old">
              {{ content.field_primary_sponsor }}
            </div>
          {% endif %}

          {% if content.field_event_sup_sponsors_ref['#items'].getValue() %}
            <div class="field--name-field-event-secondary-sponsor-wrapper">
              {{ content.field_event_sup_sponsors_ref }}
            </div>
          {% elseif content.field_secondary_sponsors|render %}
            <div class="field--name-field-event-secondary-sponsor-wrapper--old">
              {{ content.field_secondary_sponsors }}
            </div>
          {% endif %}

        </div>
      </div>
    </div>

    <div class="node--event__detail-info">
      <div class="node--event__detail-info__inner grid-container">
        <h2 class="detail-info__event-title">{{ label.0 }}</h2>
        <div class="field__name-field-event-body">
          {{ content.body }}
        </div>
      </div>
    </div>

    {# Replicate Container Paragraph markup to render Upcoming Events view block. #}
    <div class="paragraph--type--container paragraph--view-mode--default bg-color--white border-color--none width--full top-padding--xlarge bottom-padding--xlarge subtract-bottom--false">
      <div class="container__inner">
        <h2 class="container__title width--site grid-container">{{ 'Upcoming Events'|t }}</h2>
        <div class="container__content width--site grid-container">
          {{ drupal_view('upcoming_events', 'teaser_block') }}
        </div>
      </div>
    </div>
  </div>
</article>
